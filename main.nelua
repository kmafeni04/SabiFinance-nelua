require ".thirdparty.inline_map"

local http = require ".vendor.http-nelua.http"
local datastar = require ".vendor.http-nelua.extras.datastar.datastar"
local norm = require ".vendor.norm.norm"
local nelt = require ".vendor.nelt.nelt"

local bcrypt = require ".utils.bcrypt"

local auth_controller = require ".controllers.auth"


## if PROD then
-- postgres
## else
local db, err = norm.Db.new({
  kind = norm.DbKind.sqlite,
  conn = {
    sqlite = {
      name = "app.db"
    }
  }
})
local schema = norm.Schema
local type = schema.ColumnType

local err = norm.migrate(db, {
  {
    "1750497533",
    function(db: norm.Db): string
      local err = schema.create_table(db, "users", {
        {"id", type.integer, { primary_key = true }},
        {"username", type.text, { unique = true }},
        {"email", type.text, { unique = true }},
        {"password", type.text}
      })
      return err
    end
  },
  {
    "1750722036",
    function(db: norm.Db): string
      local _, err = db:insert("users", inline_map!(string, string, {
        username = "testuser",
        email = "test@test.com",
        password = bcrypt.encrypt("testpassword")
      }))
      return err
    end
  }
})
## end

local app = http.new({
  port = 8081
})

## if not PROD then
app.static_headers = inline_map!(string, string, {
  ["Cache-Control"] = ""
})
## end

local Users, err = norm.Model.new(&db, "users", "Users")
assert(err == "", err)

app:get("index", "/", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") ~= "" then
    return self:redirect(self:url_for("dashboard"))
  end
  local index = require ".templates.index-nelt"
  local tp: nelt.Template
  index(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("login", "/login", function(self: *http.Server): http.Response
  return auth_controller.login_get(self)
end)

app:post("login", "/login", function(self: *http.Server): http.Response
  return auth_controller.login_post(self, Users)
end)

app:get("signup", "/signup", function(self: *http.Server): http.Response
  return auth_controller.signup_get(self)
end)

app:post("signup", "/signup", function(self: *http.Server): http.Response
  return auth_controller.signup_post(self, Users)
end)

app:post("logout", "/logout", function(self: *http.Server): http.Response
  local err = self.session:set_val("current_user", "") 
  if err ~= "" then
    return self:error(err)
  end
  return self:redirect(self:url_for("index"))
end)

app:get("home", "/home", function(self: *http.Server): http.Response
  return self:redirect(self:url_for("dashboard"))
end)

app:get("dashboard", "/home/dashboard", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local dashboard = require ".templates.dashboard-nelt"
  local tp: nelt.Template
  dashboard(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("goals", "/home/goals", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local goals = require ".templates.goals-nelt"
  local tp: nelt.Template
  goals(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("profile", "/home/profile", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local profile = require ".templates.profile-nelt"
  local tp: nelt.Template
  profile(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:serve()
