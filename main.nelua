require ".thirdparty.inline_map"

local http = require ".vendor.http-nelua.http"
local datastar = require ".vendor.http-nelua.extras.datastar.datastar"
local norm = require ".vendor.norm.norm"
local nelt = require ".vendor.nelt.nelt"

local bcrypt = require ".utils.bcrypt"

local auth_controller = require ".controllers.auth"


## if PROD then
-- postgres
## else
local db, err = norm.Db.new({
  kind = norm.DbKind.sqlite,
  conn = {
    sqlite = {
      name = "app.db"
    }
  }
})
local schema = norm.Schema
local type = schema.ColumnType

local err = norm.migrate(db, {
  {
    "1750497533",
    function(db: norm.Db): string
      local err = schema.create_table(db, "users", {
        { "id",       type.integer, { primary_key = true } },
        { "username", type.text, { unique = true } },
        { "email",    type.text, { unique = true } },
        { "password", type.text }
      })
      return err
    end
  },
  {
    "1750722036",
    function(db: norm.Db): string
      local _, err = db:insert("users", inline_map!(string, string, {
        username = "testuser",
        email = "test@test.com",
        password = bcrypt.encrypt("testpassword")
      }))
      return err
    end
  },
  {
    "1750890982",
    function(db: norm.Db): string
      local err = schema.create_table(db, "transactions", {
  			{ "id",          type.integer, { primary_key = true } },
  			{ "date",        type.text },
  			{ "name",        type.text },
  			{ "amount",      type.real },
  			{ "type",        type.text },
  			{ "description", type.text },
  			{ "user_id",     type.integer },
  		})
      return err
    end
  }
})
## end

local app = http.new({
  port = 8081
})

## if not PROD then
app.static_headers = inline_map!(string, string, {
  ["Cache-Control"] = ""
})
## end

local Users, err = norm.Model.new(&db, "users", "Users", {
  rels = {
    {
      kind = norm.RelationKind.has_many,
      rel = {
        name = "transactions",
        model_name = "Transactions",
      }
    }
  }
})
assert(err == "", err)

local Transactions, err = norm.Model.new(&db, "transactions", "Transactions", {
  rels = {
    {
      kind = norm.RelationKind.belongs_to,
      rel = {
        name = "user",
        model_name = "Users",
      }
    }
  }
})
assert(err == "", err)

app:get("index", "/", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") ~= "" then
    return self:redirect(self:url_for("dashboard"))
  end
  local index = require ".templates.index-nelt"
  local tp: nelt.Template
  index(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("login", "/login", function(self: *http.Server): http.Response
  return auth_controller.login_get(self)
end)

app:post("login", "/login", function(self: *http.Server): http.Response
  return auth_controller.login_post(self, Users)
end)

app:get("signup", "/signup", function(self: *http.Server): http.Response
  return auth_controller.signup_get(self)
end)

app:post("signup", "/signup", function(self: *http.Server): http.Response
  return auth_controller.signup_post(self, Users)
end)

app:post("logout", "/logout", function(self: *http.Server): http.Response
  local err = self.session:set_val("current_user", "") 
  if err ~= "" then
    return self:error(err)
  end
  return self:redirect(self:url_for("index"))
end)

app:get("home", "/home", function(self: *http.Server): http.Response
  return self:redirect(self:url_for("dashboard"))
end)

app:get("dashboard", "/home/dashboard", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local dashboard = require ".templates.dashboard-nelt"
  local tp: nelt.Template
  dashboard(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:post("transaction", "/transaction", function(self: *http.Server): http.Response
  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
    return self:error(err)
  end
  local errors: sequence(string)
  local date = self.req.params["date"]
  if date == "" then
    errors:push("<li>Date is required</li>")
  end
  local date_match = date:match("%d%d%d%d%-%d%d%-%d%d")
  if not date_match then
    errors:push("<li>Malformed date</li>")
  end
  local name = self.req.params["name"]
  if name == "" then
    errors:push("<li>Name is required</li>")
  end
  if #name < 3 then
    errors:push("<li>Name must be 3 or more characters</li>")
  end
  local amount = self.req.params["amount"]
  if not amount:match("^[%-+]?%d+%.?%d*$") then
    errors:push("<li>Malformed number amount</li>")
  end
  local amount = tonumber(amount)
  if amount <= 0 then
    errors:push("<li>Amount must be greater than 0</li>")
  end
  local type = self.req.params["type"]
  local desc = self.req.params["desc"]
  if #errors > 0 then
    sseg:merge_fragments(('<ul id="errors">%s</ul>'):format(string.concat(errors, "\n")))
  else
    sseg:merge_fragments('<ul id="errors"></ul>')
    -- TODO: Handle transaction creation logic
    sseg:merge_signals("{ popup: false }")
  end
  return sseg.resp
end)

app:get("goals", "/home/goals", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local goals = require ".templates.goals-nelt"
  local tp: nelt.Template
  goals(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("profile", "/home/profile", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local profile = require ".templates.profile-nelt"
  local tp: nelt.Template
  profile(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:serve()
