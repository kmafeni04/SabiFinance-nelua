{% local nelt = require "..vendor.nelt.nelt" %}
{% local http = require "..vendor.http-nelua.http"%}

{% local function layout(
tp: *nelt.Template,
title: string,
content: function(tp: *nelt.Template, self: *http.Server),
self: *http.Server)
%}
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{{ title ~= "" and title or "SabiFinance" }}</title>
  <link rel="icon" href="/static/images/naira-coin-small.svg" type="image/svg+xml" />
  <script type="module"
    src="https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar.js"></script>
  <link rel="stylesheet" href="/static/css/app.css" />

  <script>
    // 🌘 CSS Scope Inline (https://github.com/gnat/css-scope-inline)
    window.cssScopeCount ??= 1; // Let extra copies share the scope count.
    window.cssScope ??= new MutationObserver((mutations) => {
      // Allow 1 observer.
      document?.body
        ?.querySelectorAll("style:not([ready])")
        .forEach((node) => {
          // Faster than walking MutationObserver results when recieving subtree (DOM swap, htmx, ajax, jquery).
          var scope = "me__" + window.cssScopeCount++; // Ready. Make unique scope, example: .me__1234
          node.parentNode.classList.add(scope);
          node.textContent = node.textContent
            .replace(
              /(?:^|\.|(\s|[^a-zA-Z0-9\-\_]))(me|this|self)(?![a-zA-Z])/g,
              "$1." + scope,
            ) // Can use: me this self
            .replace(
              /((@keyframes|animation:|animation-name:)[^{};]*)\.me__/g,
              "$1me__",
            ) // Optional. Removes need to escape names, ex: "\.me"
            .replace(
              /(?:@media)\s(xs-|sm-|md-|lg-|xl-|sm|md|lg|xl|xx)/g, // Optional. Responsive design. Mobile First (above breakpoint): 🟢 None sm md lg xl xx 🏁  Desktop First (below breakpoint): 🏁 xs- sm- md- lg- xl- None 🟢 *- matches must be first!
              (match, part1) => {
                return (
                  "@media " +
                  {
                    sm: "(min-width: 640px)",
                    md: "(min-width: 768px)",
                    lg: "(min-width: 1024px)",
                    xl: "(min-width: 1280px)",
                    xx: "(min-width: 1536px)",
                    "xs-": "(max-width: 639px)",
                    "sm-": "(max-width: 767px)",
                    "md-": "(max-width: 1023px)",
                    "lg-": "(max-width: 1279px)",
                    "xl-": "(max-width: 1535px)",
                  }[part1]
                );
              },
            );
          node.setAttribute("ready", "");
        });
    }).observe(document.documentElement, {childList: true, subtree: true});
  </script>
</head>

<body>
  <div>
    <style>
      me {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: black;
        position: fixed;
        height: 5rem;
        padding-block: var(--padding-sm);
        padding-inline: var(--padding-md);
        width: 100svw;

        & img {
          width: 3rem;
        }
      }
    </style>
    <a href="{{ self:url_for('index') }}"><img src="/static/images/naira-coin-small.svg" class="h-12" alt="" /></a>
    <div>
      <style>
        me {
          display: flex;
          gap: var(--gap-sm);

          & .btn--inverse {
            border: solid 1px white
          }

          & .btn--inverse:hover {
            color: var(--font-color);
            background-color: white;
          }
        }
      </style>
      <a href="{{ self:url_for('login') }}" class="btn btn--inverse">Log in</a>
      <a href="{{ self:url_for('signup') }}" class="btn btn--inverse">Sign Up</a>
    </div>
  </div>
  <main>
    <style>
      me {
        padding-top: 5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100svh;
      }
    </style>
    {% content(tp, self) %}
  </main>
</body>

</html>
{% end %}
{% return layout %}
