local http = require ".vendor.http-nelua.http"
local datastar = require ".vendor.http-nelua.extras.datastar.datastar"
local norm = require ".vendor.norm.norm"
local nelt = require ".vendor.nelt.nelt"

local bcrypt = require ".utils.bcrypt"

local auth_controller = require ".controllers.auth"
local transactions_controller = require ".controllers.transactions"

require ".thirdparty.inline_map"


## if PROD then
-- postgres
## else
  ## if TEST then
    local db, err = norm.Db.new({
      kind = norm.DbKind.sqlite,
      conn = {
        sqlite = {
          name = ":memory:"
        }
      }
    })
  ## else
    local db, err = norm.Db.new({
      kind = norm.DbKind.sqlite,
      conn = {
        sqlite = {
          name = "app.db"
        }
      }
    })
  ## end
local schema = norm.Schema
local type = schema.ColumnType

local err = norm.migrate(db, inline_map!(string, norm.Schema.MigrationFn, {
  ["1750497533"] = function(db: norm.Db): string
    local err = schema.create_table(db, "users", {
      { "id",       type.integer, { primary_key = true } },
      { "username", type.text, { unique = true } },
      { "email",    type.text, { unique = true } },
      { "password", type.text }
    }, "", { strict = true })
    return err
  end,

  ["1750722036"] = function(db: norm.Db): string
    local _, err = db:insert("users", inline_map!(string, string, {
      username = "testuser",
      email = "test@test.com",
      password = bcrypt.encrypt("testpassword")
    }))
    return err
  end,

  ["1750890982"] = function(db: norm.Db): string
    local err = schema.create_table(db, "transactions", {
			{ "id",          type.integer, { primary_key = true } },
			{ "date",        type.text },
			{ "name",        type.text },
			{ "amount",      type.real },
			{ "type",        type.text },
			{ "description", type.text },
			{ "user_id",     type.integer },
    }, "", { strict = true })
    return err
  end
}))
## end

local app = http.Server.new({
  port = 8081
})

## if not PROD then
  app.static_headers = inline_map!(string, string, {
    ["Cache-Control"] = ""
  })
## end

local Users, err = norm.Model.new(&db, "users", "Users", {
  rels = {
    {
      kind = norm.RelationKind.has_many,
      rel = {
        name = "transactions",
        model_name = "Transactions",
      }
    }
  }
})
assert(err == "", err)

local Transactions, err = norm.Model.new(&db, "transactions", "Transactions", {
  rels = {
    {
      kind = norm.RelationKind.belongs_to,
      rel = {
        name = "user",
        model_name = "Users",
      }
    }
  }
})
assert(err == "", err)

app:get("index", "/", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") ~= "" then
    return self:redirect(self:url_for("dashboard"))
  end
  local index = require ".templates.index-nelt"
  local tp: nelt.Template
  index(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("login", "/login", function(self: *http.Server): http.Response
  return auth_controller.login_get(self)
end)

app:post("login", "/login", function(self: *http.Server): http.Response
  return auth_controller.login_post(self, Users)
end)

app:get("signup", "/signup", function(self: *http.Server): http.Response
  return auth_controller.signup_get(self)
end)

app:post("signup", "/signup", function(self: *http.Server): http.Response
  return auth_controller.signup_post(self, Users)
end)

app:post("logout", "/logout", function(self: *http.Server): http.Response
  return auth_controller.logout(self)
end)

app:get("home", "/home", function(self: *http.Server): http.Response
  return self:redirect(self:url_for("dashboard"))
end)

app:get("dashboard", "/home/dashboard", function(self: *http.Server): http.Response
  local current_user = self.session:get_val("current_user")
  if current_user == "" then
    return self:redirect(self:url_for("login"))
  end
  local current_user_id = self.session:get_val("current_user_id")
  local dashboard = require ".templates.dashboard-nelt"
  local tp: nelt.Template
  local transactions, err = Transactions:select(inline_map!(string, string, {
    user_id = current_user_id
  }))
  if err ~= "" then
    print(err)
    return self:error()
  end
  tp.data = &transactions
  dashboard(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("new_transaction", "/transactions/create", function(self: *http.Server): http.Response
  return transactions_controller.new_transaction(self)
end)

app:post("transactions", "/transactions", function(self: *http.Server): http.Response
  return transactions_controller.transactions_post(self, Transactions)
end)

app:get("update_transaction", "/transactions/:id/update", function(self: *http.Server): http.Response
  return transactions_controller.update_transaction(self, Transactions)
end)

app:put("transaction", "/transactions/:id", function(self: *http.Server): http.Response
  return transactions_controller.transaction_put(self, Transactions)
end)

app:delete("transaction", "/transactions/:id", function(self: *http.Server): http.Response
  return transactions_controller.transaction_delete(self, Transactions)
end)

app:get("goals", "/home/goals", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local goals = require ".templates.goals-nelt"
  local tp: nelt.Template
  goals(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("profile", "/home/profile", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local profile = require ".templates.profile-nelt"
  local tp: nelt.Template
  profile(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

## if TEST then
  local test = require ".test"
  test(app)
## else
  app:serve()
## end
