local http = require ".vendor.http-nelua.http"
local datastar = require ".vendor.http-nelua.extras.datastar.datastar"
local norm = require ".vendor.norm.norm"
local nelt = require ".vendor.nelt.nelt"

local bcrypt = require ".utils.bcrypt"

local auth_controller = require ".controllers.auth"
local transactions_controller = require ".controllers.transactions"

require ".thirdparty.inline_map"


## if PROD then
-- postgres
## else
  ## if TEST then
    local db, err = norm.Db.new({
      kind = norm.DbKind.sqlite,
      conn = {
        sqlite = {
          name = ":memory:"
        }
      }
    })
  ## else
    local db, err = norm.Db.new({
      kind = norm.DbKind.sqlite,
      conn = {
        sqlite = {
          name = "app.db"
        }
      }
    })
  ## end
local schema = norm.Schema
local type = schema.ColumnType

local err = norm.migrate(db, inline_map!(string, norm.Schema.MigrationFn, {
  ["1750497533"] = function(db: norm.Db): string
    local err = schema.create_table(db, "users", {
      { "id",       type.integer, { primary_key = true } },
      { "username", type.text, { unique = true } },
      { "email",    type.text, { unique = true } },
      { "password", type.text }
    }, { strict = true })
    return err
  end,

  ["1750722036"] = function(db: norm.Db): string
    local _, err = db:insert("users", inline_map!(string, string, {
      username = "testuser",
      email = "test@test.com",
      password = bcrypt.encrypt("testpassword")
    }))
    return err
  end,

  ["1750890982"] = function(db: norm.Db): string
    local err = schema.create_table(db, "transactions", {
			{ "id",          type.integer, { primary_key = true } },
			{ "date",        type.text },
			{ "name",        type.text },
			{ "amount",      type.real },
			{ "type",        type.text },
			{ "description", type.text },
			{ "user_id",     type.integer },
    }, { strict = true })
    return err
  end
}))
## end

local app = http.Server.new({
  port = 8081
})

## if not PROD then
  app.static_headers = inline_map!(string, string, {
    ["Cache-Control"] = ""
  })
## end

local Users, err = norm.Model.new(&db, "users", "Users", {
  rels = {
    {
      kind = norm.RelationKind.has_many,
      rel = {
        name = "transactions",
        model_name = "Transactions",
      }
    }
  }
})
assert(err == "", err)

local Transactions, err = norm.Model.new(&db, "transactions", "Transactions", {
  rels = {
    {
      kind = norm.RelationKind.belongs_to,
      rel = {
        name = "user",
        model_name = "Users",
      }
    }
  }
})
assert(err == "", err)

app:get("index", "/", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") ~= "" then
    return self:redirect(self:url_for("dashboard"))
  end
  local index = require ".templates.index-nelt"
  local tp: nelt.Template
  index(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("login", "/login", function(self: *http.Server): http.Response
  return auth_controller.login_get(self)
end)

app:post("login", "/login", function(self: *http.Server): http.Response
  return auth_controller.login_post(self, Users)
end)

app:get("signup", "/signup", function(self: *http.Server): http.Response
  return auth_controller.signup_get(self)
end)

app:post("signup", "/signup", function(self: *http.Server): http.Response
  return auth_controller.signup_post(self, Users)
end)

app:post("logout", "/logout", function(self: *http.Server): http.Response
  return auth_controller.logout(self)
end)

app:get("home", "/home", function(self: *http.Server): http.Response
  return self:redirect(self:url_for("dashboard"))
end)

app:get("dashboard", "/home/dashboard", function(self: *http.Server): http.Response
  local current_user = self.session:get_val("current_user")
  if current_user == "" then
    return self:redirect(self:url_for("login"))
  end
  local current_user_id = self.session:get_val("current_user_id")
  local dashboard = require ".templates.dashboard-nelt"
  local tp: nelt.Template
  local transactions, err = Transactions:select(inline_map!(string, string, {
    user_id = current_user_id
  }), { extra_sql = "ORDER BY date DESC" })
  if err ~= "" then
    print(err)
    return self:error()
  end
  tp.data = &transactions
  dashboard(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("new_transaction", "/transactions/create", function(self: *http.Server): http.Response
  return transactions_controller.new_transaction(self)
end)

app:post("transactions", "/transactions", function(self: *http.Server): http.Response
  return transactions_controller.transactions_post(self, Transactions)
end)

app:get("update_transaction", "/transactions/:id/update", function(self: *http.Server): http.Response
  return transactions_controller.update_transaction(self, Transactions)
end)

app:put("transaction", "/transactions/:id", function(self: *http.Server): http.Response
  return transactions_controller.transaction_put(self, Transactions)
end)

app:delete("transaction", "/transactions/:id", function(self: *http.Server): http.Response
  return transactions_controller.transaction_delete(self, Transactions)
end)

app:get("analytics_chart", "/analytics-chart", function(self: *http.Server): http.Response
  local current_user_id = self.session:get_val("current_user_id")
  if current_user_id == "" then
    print("Failed to determine current_user")
    return self:error()
  end

  local transactions, err = Transactions:select(inline_map!(string, string, {
    user_id = current_user_id
  }))
  if err ~= "" then
    print(err)
    return self:error()
  end

  local sseg, err = datastar.ServerSentEventGenerator.new(self)
  if err ~= "" then
    print(err)
    return self:error()
  end

  sseg:patch_elements('<div id="analytics"></div>')
  local sort: string
  local signals, err = datastar.read_signals(self)
  if err == "" then
    local obj = signals:get_obj()
    if obj:has("sort") then
      sort = obj["sort"]:get_str()
    end
  end
  sort = sort ~= "" and sort or "day"

  local analytics_chart = require ".templates.components.analytics-chart-nelt" 

  local function day_of_week(date: string)
    local matched, match_seq = date:match("(%d+)-(%d+)-(%d+)")
  
    local year = tonumber(match_seq[1])
    local month = tonumber(match_seq[2])
    local day = tonumber(match_seq[3])

    local timeInSeconds = os.time({
      year = year,
      month = month,
      day = day,
      hour = 0,
      min = 0,
      sec = 0,
      isdst = false -- Daylight saving time
    })

    local day = os.date("%A", timeInSeconds)
    return day
  end

  local date = os.date("!%Y-%m-%d")

  local transactions: sequence(norm.Model.Inst)
  local err: string
  local labels = "[]"
  local income_data = "[]"
  local expense_data = "[]"

  if sort == "day" then
    transactions, err = Transactions:select(("user_id = %s AND date = %s ORDER BY date asc"):format(
      norm.escape_literal(current_user_id),
      norm.escape_literal(date)
    ))
    labels = '["' .. day_of_week(date) .. '"]'

    local income_transactions: sequence(string)
    local expense_transactions: sequence(string)

    for i, transaction in ipairs(transactions) do
      if transaction:get_col("type") == "Income" then
        income_transactions:push(transaction:get_col("amount"))
      end
      if transaction:get_col("type") == "Expense" then
        expense_transactions:push(transaction:get_col("amount"))
      end
    end

    income_data = "[" .. string.concat(income_transactions, "+") .. "]"
    expense_data = "[" .. string.concat(expense_transactions, "+") .. "]"
  elseif sort == "week" then
    transactions, err = Transactions:select(
      ("user_id = %s AND strftime('%%Y-%%W', date) = strftime('%%Y-%%W', %s) ORDER BY date asc"):format(
        norm.escape_literal(current_user_id),
        norm.escape_literal(date)
      )
    ) -- sqlite specific
  end

  if err ~= "" then
    print(err)
    return self:error()
  end

  local tp: nelt.Template
  analytics_chart(&tp, self, labels, income_data, expense_data)
  sseg:patch_elements(tp:tostring())

  return sseg.resp
end)

app:get("goals", "/home/goals", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local goals = require ".templates.goals-nelt"
  local tp: nelt.Template
  goals(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

app:get("profile", "/home/profile", function(self: *http.Server): http.Response
  if self.session:get_val("current_user") == "" then
    return self:redirect(self:url_for("login"))
  end
  local profile = require ".templates.profile-nelt"
  local tp: nelt.Template
  profile(&tp, self)
  return self:html(http.Status.OK, tp:tostring())
end)

## if TEST then
  local test = require ".test"
  test(app)
## else
  app:serve()
## end
