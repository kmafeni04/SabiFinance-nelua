local http = require "http"

require "map"

local write_sb: stringbuilder

return function(app: *http.Server)

  app.write = function(self: *http.Server, s: string): (boolean, string)
    write_sb:write(s)
    return true, ""
  end
    
  local resp, req_str = app:mock_request(app:url_for("index"))
  assert(resp.status == 200)

  local resp, req_str = app:mock_request(app:url_for("login"))
  assert(resp.status == 200)

  local resp, req_str = app:mock_request(app:url_for("login"), {
    method = "POST",
    params = map!(string, string, {
      username = "testuser",
      password = "testpassword"
    }),
  })
  assert(resp.status == 302)

  local resp, req_str = app:mock_request(app:url_for("signup"))
  assert(resp.status == 200)

  local resp, req_str = app:mock_request(app:url_for("signup"), {
    method = "POST",
    params = map!(string, string, {
      username = "testuser1",
      email = "testuser1@test.com",
      password = "testpassword",
      ["confirm-password"] = "testpassword"
    }),
  })
  assert(resp.status == 302)
  assert(resp.body == "username=testuser1&email=testuser1@test.com&password=testpassword&confirm-password=testpassword")

  local resp, req_str = app:mock_request(app:url_for("logout"), { method = "POST" })
  local written_text = write_sb:promote()
  local written_match = written_text:match("window%.location")
  assert(written_match)
  assert(resp.status == 200)
  write_sb = {}

  local resp, req_str = app:mock_request(app:url_for("home"))
  assert(resp.status == 302)

  local resp, req_str = app:mock_request(app:url_for("dashboard"), {
    method = "GET",
    session_vals = map!(string, string, {
      current_user = "testuser",
      current_user_id = "1"
    })
  })
  assert(resp.status == 200)

  local resp, req_str = app:mock_request(app:url_for("new_transaction"), { method = "GET" })
  local written_text = write_sb:promote()
  local written_match = written_text:match("contentType:")
  assert(written_match)
  assert(resp.status == 200)
  write_sb = {}

  local resp, req_str = app:mock_request(app:url_for("transactions"), {
    method = "POST",
    params = map!(string, string, {
      date = os.date("!%Y-%m-%d"),
      name = "hello",
      amount = "10",
      type = "Income",
      description = ""
    }),
    session_vals = map!(string, string, {
      current_user_id = "1"
    })
  })
  local written_text = write_sb:promote()
  local written_match = written_text:match("transaction_expenses")
  assert(written_match)
  assert(resp.status == 200)
  write_sb = {}

  local resp, req_str = app:mock_request(app:url_for("update_transaction", {
    route_params = map!(string, string, {
      id = "1"
    })
  }), { method = "GET" })
  local written_text = write_sb:promote()
  local written_match = written_text:match("contentType:")
  assert(written_match)
  assert(resp.status == 200)
  write_sb = {}

  local resp, req_str = app:mock_request(app:url_for("transaction", {
    route_params = map!(string, string, {
      id = "1"
    })
  }), {
    method = "PUT",
    params = map!(string, string, {
      date = os.date("!%Y-%m-%d"),
      name = "hello",
      amount = "10",
      type = "Income",
      description = ""
    }),
    session_vals = map!(string, string, {
      current_user_id = "1"
    })
  })
  local written_text = write_sb:promote()
  local bad_written_match = written_text:match("Internal error occured")
  assert(not bad_written_match)
  local written_match = written_text:match("transaction_income")
  assert(written_match)
  assert(resp.status == 200)
  write_sb = {}

  local resp, req_str = app:mock_request(app:url_for("transaction", {
    route_params = map!(string, string, {
      id = "1"
    })
  }), {
    method = "DELETE",
    params = map!(string, string, {
      date = os.date("!%Y-%m-%d"),
      name = "hello",
      amount = "10",
      type = "Income",
      description = ""
    }),
    session_vals = map!(string, string, {
      current_user_id = "1"
    })
  })
  local written_text = write_sb:promote()
  local bad_written_match = written_text:match("Internal error occured")
  assert(not bad_written_match)
  local written_match = written_text:match("transaction_income")
  assert(written_match)
  assert(resp.status == 200)
  write_sb = {}


  print("All tests pass")
end
